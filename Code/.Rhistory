tags$head(tags$style("#warnings2{color: red;
font-style: italic;
}"
)
)
),
mainPanel(
textOutput(outputId = "imputation"),
textOutput(outputId = "processing"),
textOutput(outputId = "prediction"),
plotOutput(outputId = "fit")
)
)
)
## Find the N nearest data, impute them with mean
imputation_for_missing_data <- function(N=10, AGE,ABDOMEN,WEIGHT
,WRIST='',FOREARM='',THIGH=''){
res = list(NULL)
length(res) = 3
if ((!(WRIST=='')) && (!(FOREARM=='')) && (!(THIGH==''))){
return(res)
}
# print(res)
n = nrow(BodyFat)
dist = numeric(n)
for (i in c(1:n)){
if ((!(WRIST==''))){
dist[i] = dist[i] + (scale(as.numeric(WRIST) - BodyFat$WRIST)[i])**2
}
if ((!(FOREARM==''))){
dist[i] = dist[i] + (scale(as.numeric(FOREARM) - BodyFat$FOREARM)[i])**2
}
if ((!(THIGH==''))){
dist[i] = dist[i] + (scale(as.numeric(THIGH) - BodyFat$THIGH)[i])**2
}
dist[i] = dist[i] + (scale(as.numeric(AGE) - BodyFat$AGE)[i])**2
+ (scale(as.numeric(ABDOMEN) - BodyFat$ABDOMEN)[i])**2
+ (scale(as.numeric(WEIGHT) - BodyFat$WEIGHT)[i])**2
}
# print(dist)
index = order(dist)[1:N]
# print(index)
if ((WRIST=='')){
res[[1]] = mean(BodyFat$WRIST[index])
}
if ((FOREARM=='')){
res[[2]] = mean(BodyFat$FOREARM[index])
}
if ((THIGH=='')){
res[[3]] = mean(BodyFat$THIGH[index])
}
return(res)
}
# Server function ------------------------------------------------
server <- function(input, output){
pred_val <- function(AGE = input$AGE, ABDOMEN = input$ABDOMEN, WEIGHT = input$WEIGHT,
WRIST, FOREARM, THIGH){
res = list()
length(res)<-2
new_x = data.frame(AGE = as.numeric(AGE), WEIGHT = as.numeric(WEIGHT),
ABDOMEN= as.numeric(ABDOMEN), THIGH = as.numeric(THIGH),
FOREARM = as.numeric(FOREARM), WRIST = as.numeric(WRIST))
fit = predict(final_model, newdata = new_x, se = TRUE)
upr = fit$fit + 2*fit$se.fit
dwn = fit$fit - 2*fit$se.fit
res[[1]] = paste("Estimated BodyFat is ",round(fit$fit,2)," with a 95% Confidence Interval "
,"[",round(dwn,2),",",round(upr,2),"].")
res[[2]] = fit$fit
return(res)
}
imputation_input <- reactive({
# req(input$AGE)
# req(input$ABDOMEN)
# req(input$WEIGHT)
WRIST = input$WRIST
FOREARM = input$FOREARM
THIGH = input$THIGH
res_imput = imputation_for_missing_data(AGE = input$AGE, ABDOMEN = input$ABDOMEN, WEIGHT = input$WEIGHT,
WRIST = input$WRIST, FOREARM = input$FOREARM, THIGH = input$THIGH)
# print(res_imput)
imput_text = ''
output$processing<- renderText({
"Calculating."
})
if((!is.null(res_imput[[1]]))){
WRIST = res_imput[[1]]
imput_text = paste0( imput_text,"WRIST = ", WRIST, '  ')
}
if((!is.null(res_imput[[2]]))){
FOREARM = res_imput[[2]]
imput_text = paste0( imput_text,"FOREARM = ", FOREARM, '  ')
}
if((!is.null(res_imput[[3]]))){
THIGH = res_imput[[3]]
imput_text = paste0( imput_text,"THIGH = ", THIGH, '  ')
}
# print(imput_text)
output$processing<- renderText({
"Calculating.."
})
res_val = pred_val(WRIST = WRIST, THIGH = THIGH, FOREARM = FOREARM)
pred_bodyfat = res_val[[2]]
if (pred_bodyfat<=1 || pred_bodyfat>=50){
output$warnings<- renderText({
"Error: Have an abnormal prediction, try another values."
})
output$processing <- renderText({
"Finished!"})
return('')
}
output$prediction <- renderText({
res_val[[1]]
})
output$processing<- renderText({
"Calculating..."
})
output$fit <- renderPlot({
if(pred_bodyfat<6.48){
lg_col = 'darkslategray1'
lg_text = "Essential"
}
else if(pred_bodyfat<14.0187){
lg_col = 'deepskyblue'
lg_text = "Athletes"
}
else if(pred_bodyfat<18.9960){
lg_col = 'green'
lg_text = "Fit"
}
else if(pred_bodyfat<23.4314){
lg_col = 'lightcoral'
lg_text = "Acceptable"
}
else if(pred_bodyfat<37.1034){
lg_col = 'Red'
lg_text = "Obese"
}
else{
lg_col = 'Red4'
lg_text = "Over Obese"
}
barplot(height=pred_bodyfat,horiz = TRUE, axes = FALSE, xlim = c(0,40),col = lg_col,
legend.text = lg_text, ylab = 'BodyFat',names.arg = NULL,
args.legend = list(x = "bottomright"))
axis(3,c(0,6.4823,14.0187,18.9960,23.4314,37.1034,45.00))
}, height = 100)
output$processing <- renderText({
"Finished!"
})
if (!(imput_text == '')){
imput_text = paste0("Imputation for ", imput_text)
output$warnings2 <- renderText({
"Warnings: The Confidence interval may be underestimated since data was imputed."
})
return(paste(imput_text))
}
else{
output$warnings2 <- renderText({
""
})
return('')
}
}
)
check_input <- reactive({
output_text = ''
if (input$AGE == ''){
output_text = paste0(output_text,"Age ")
}
if (input$ABDOMEN == ''){
output_text = paste0(output_text,"ABDOMEN ")
}
if (input$WEIGHT == ''){
output_text = paste0(output_text,"WEIGHT ")
}
if (output_text != ''){
output_text = paste0("Missing Values ", output_text,"are not allowed.")
return(output_text)
}
# if (is.na(as.numeric(input$Age))){
#   output_text = paste0(output_text,"Age ")
# }
if (is.na(as.numeric(input$ABDOMEN))){
output_text = paste0(output_text,"ABDOMEN ")
}
if (is.na(as.numeric(input$WEIGHT))){
output_text = paste0(output_text,"WEIGHT ")
}
if (is.na(as.numeric(input$WRIST)) && input$WRIST!=''){
output_text = paste0(output_text,"WRIST ")
}
if (is.na(as.numeric(input$FOREARM))&& input$FOREARM!=''){
output_text = paste0(output_text,"FOREARM ")
}
if (is.na(as.numeric(input$THIGH))&&input$THIGH!=''){
output_text = paste0(output_text,"THIGH ")
}
if (output_text != ''){
output_text = paste0("Please enter numbers for ", output_text,".")
return(output_text)
}
if (as.numeric(input$AGE) < min(BodyFat$AGE) || as.numeric(input$AGE) > max(BodyFat$AGE)){
output_text = paste0(output_text, "AGE ")
}
if (as.numeric(input$ABDOMEN) < 0.9*min(BodyFat$ABDOMEN) || as.numeric(input$ABDOMEN) > 1.1*max(BodyFat$ABDOMEN)){
output_text = paste0(output_text, "ABDOMEN ")
}
if (as.numeric(input$WEIGHT) < 0.9*min(BodyFat$WEIGHT) || as.numeric(input$WEIGHT) > 1.1*max(BodyFat$WEIGHT)){
output_text = paste0(output_text, "WEIGHT ")
}
if (input$WRIST!='' && (as.numeric(input$WRIST) < 0.9*min(BodyFat$WRIST) || as.numeric(input$WRIST) > 1.1*max(BodyFat$WRIST))){
output_text = paste0(output_text, "WRIST ")
}
if (input$FOREARM!='' && (as.numeric(input$FOREARM) < 0.9*min(BodyFat$FOREARM) || as.numeric(input$FOREARM) > 1.1*max(BodyFat$FOREARM))){
output_text = paste0(output_text, "FOREARM ")
}
if (input$THIGH!='' && (as.numeric(input$THIGH) < 0.9*min(BodyFat$THIGH) || as.numeric(input$THIGH) > 1.1*max(BodyFat$THIGH))){
output_text = paste0(output_text, "THIGH ")
}
if (output_text != ''){
output_text = paste0("Found extreame input values for ", output_text,", the estimate might be unreliable.")
output$warnings <- renderText({
output_text
})
return('')
}
return(output_text)
})
click_run <- reactive({
res_check = check_input()
if (res_check==''){
return(imputation_input())
}
else{
output$warnings <- renderText({
res_check
})
return('')
}
})
#quantile      0%      25%      50%      75%     100%
#         6.48342 14.01871 18.99608 23.43139 37.10338
observeEvent(input$clear_button,{
output$processing <- renderText({
""
})
output$prediction <- renderText({
""
})
output$warnings <- renderText({
""
})
output$warnings2 <- renderText({
""
})
output$imputation <- renderText({
""
})
output$fit <- renderPlot({
NULL
})
},ignoreInit = TRUE)
observeEvent(input$predict_button,{
output$imputation <- renderText(
{
click_run()}
)
},ignoreInit = TRUE)
}
shinyApp(ui = ui, server = server)
?barplot
fit_sm07 <- mgcv::gam(BODYFAT~ 1 + AGE +WEIGHT
+ s(ABDOMEN,WRIST,THIGH)
,data = BodyFat, method = 'REML')
summary(fit_sm07)
fit_sm07$AIC
AIC(fit_sm07)
AIC(final_model)
fit_sm07 <- mgcv::gam(BODYFAT~ 1 + AGE +WEIGHT
+ s(ABDOMEN,WRIST)
,data = BodyFat, method = 'REML')
summary(fit_sm07)
AIC(fit_sm07)
concurvity(fit_sm07)
cor(fit_sm05)
fit_sm05 <- mgcv::gam(BODYFAT~ 1 + AGE  + WEIGHT
+ s(ABDOMEN)
+ s(THIGH)
+ FOREARM + s(WRIST)
,data = BodyFat, method = 'REML')
summary(fit_sm05)
concurvity(fit_sm05)
fit_sm06 <- mgcv::gam(BODYFAT~ 1 + AGE  + WEIGHT
+ s(ABDOMEN)
+ s(THIGH)
+ s(WRIST)
,data = BodyFat, method = 'REML')
summary(fit_sm06)
concurvity(fit_sm06)
fit_sm06 <- mgcv::gam(BODYFAT~ 1 + AGE  + WEIGHT
+ s(ABDOMEN)
+ s(THIGH) + FOREARM
+ s(WRIST)
,data = BodyFat, method = 'REML')
summary(fit_sm06)
concurvity(fit_sm06)
fit_sm06 <- mgcv::gam(BODYFAT~ 1 + AGE  + WEIGHT
+ s(ABDOMEN)
+ FOREARM
+ s(WRIST)
,data = BodyFat, method = 'REML')
summary(fit_sm06)
concurvity(fit_sm06)
fit_sm06 <- mgcv::gam(BODYFAT~ 1  + WEIGHT
+ s(ABDOMEN)
+ FOREARM
+ s(WRIST)
,data = BodyFat, method = 'REML')
summary(fit_sm06)
concurvity(fit_sm06)
fit_sm06 <- mgcv::gam(BODYFAT~ 1  + WEIGHT
+ s(ABDOMEN)
+ s(WRIST)
,data = BodyFat, method = 'REML')
summary(fit_sm06)
concurvity(fit_sm06)
fit_sm06 <- mgcv::gam(BODYFAT~ 1  + WEIGHT
+ s(ABDOMEN,WRIST)
,data = BodyFat, method = 'REML')
summary(fit_sm06)
concurvity(fit_sm06)
fit_sm06 <- mgcv::gam(BODYFAT~ 1
+ s(ABDOMEN,WRIST)
,data = BodyFat, method = 'REML')
summary(fit_sm06)
concurvity(fit_sm06)
fit_sm06 <- mgcv::gam(BODYFAT~ 1  + AGE
+ s(ABDOMEN,WRIST)
,data = BodyFat, method = 'REML')
summary(fit_sm06)
concurvity(fit_sm06)
fit_sm06 <- mgcv::gam(BODYFAT~ 1  + AGE
+ s(ABDOMEN)+s(WRIST)
,data = BodyFat, method = 'REML')
summary(fit_sm06)
concurvity(fit_sm06)
fit_sm06 <- mgcv::gam(BODYFAT~ 1  + WEIGHT
+ s(ABDOMEN)+s(WRIST)
,data = BodyFat, method = 'REML')
summary(fit_sm06)
concurvity(fit_sm06)
fit_sm06 <- mgcv::gam(BODYFAT~ 1  + WEIGHT
+ s(ABDOMEN)+WRIST
,data = BodyFat, method = 'REML')
summary(fit_sm06)
concurvity(fit_sm06)
fit_sm06 <- mgcv::gam(BODYFAT~ 1
+ s(ABDOMEN)
,data = BodyFat, method = 'REML')
summary(fit_sm06)
concurvity(fit_sm06)
rm(list=ls())
# Read the data ----------------------------------------
setwd("D:/WISC/stat628/Module 2/Stat628Module2_Group9")
BodyFatData <- read.csv('../BodyFat.csv')
del_index = c(33, 39, 42, 48, 76, 96, 163, 172, 182, 216, 221)
BodyFat = BodyFatData[-del_index,]
BodyFat = subset(BodyFat, select = -c(IDNO,DENSITY))
# Create K-fold ----------------------------
## I see many cv functions are written like this.
## The number in each fold may not be equal.
K = 10
k_fold_data <- function(K = 10, data){
n = nrow(data)
f <- ceiling(n/K)
s <- sample(rep(1L:K, f), n)
n.s <- table(s)
print(n.s)
test_data = list()
train_data = list()
for (i in c(1:K)){
test_data[[i]] = data[which(s==i),]
train_data[[i]] = data[which(s!=i),]
}
return(list(test_data,train_data))
}
res = k_fold_data(data = BodyFat)
MSE_lm_train = numeric(K) # Simple linear model BIC method based
MSE_lm_test = numeric(K) # Simple linear model, BIC method based
MSE_lm3_train = numeric(K) # Simple linear model, 3 variables model based BODYFAT~1+WEIGHT+ABDOMEN+WRIST
MSE_lm3_test = numeric(K) # Simple linear model, 3 variables model based
MSE_NR6_train = numeric(K) # Nonparametirc model with 6 variables
MSE_NR6_test = numeric(K) # Nonparametirc model with 6 variables
MSE_NR8_train = numeric(K) # Nonparametirc model with 8 variables
MSE_NR8_test = numeric(K) # Nonparametirc model with 8 variables
MSE_lasso_train = numeric(K) # Lasso
MSE_lasso_test = numeric(K) # Lasso
MSE_NRVS_train = numeric(K) # GAM with joint distribution 1 + AGE +WEIGHT + s(ABDOMEN,WRIST,THIGH)
MSE_NRVS_test = numeric(K)
MSE_NRVS2_train = numeric(K) # GAM with joint distribution 1 + AGE +WEIGHT  + FOREARM + s(ABDOMEN,WRIST,THIGH)
MSE_NRVS2_test = numeric(K)
library(mgcv)
library(leaps)
library(glmnet)
cal_MSE <- function(y_test, y_pred){
n = length(y_test)
return(sum((y_test-y_pred)^2)/n)
}
for (i in c(1:K)){
BodyFat_train = res[[2]][[i]]
BodyFat_test = res[[1]][[i]]
# Best Subset
Y = BodyFat_train$BODYFAT
n = nrow(BodyFat_train)
X = subset(BodyFat_train, select = -c(BODYFAT))
model = regsubsets(y = Y, x = X, nvmax = dim(X)[2])
ss = summary(model)
rsq = ss$rsq
rss = ss$rss
adjr2 = ss$adjr2
cp = ss$cp ## Equivalent to AIC
bic = ss$bic
## Choose the BIC criteria method based
best_num_variables = which.min(bic)
lm_best_index = which(ss$which[best_num_variables,][2:15])
fit_best = lm(Y~., data = cbind(Y,X[,lm_best_index]))
print(fit_best$rank)
## 3 variables model based lm
fit_lm3 = lm(BODYFAT~1+WEIGHT+ABDOMEN+WRIST, data = BodyFat_train)
MSE_lm3_train[i] = mean(residuals(fit_lm3)^2)
MSE_lm3_test[i] = mean((predict(fit_lm3, newdata = BodyFat_test)
- BodyFat_test$BODYFAT)^2)
## Lasso
fit_lasso <- glmnet(x = as.matrix(BodyFat_train[, 2:ncol(BodyFat_train)]), y = BodyFat_train[, 1])
fit_lasso_cv <- cv.glmnet(x = as.matrix(BodyFat_train[, 2:ncol(BodyFat_train)]), y = BodyFat_train[, 1])
bestlam1 = fit_lasso_cv$lambda.min
# bestlam2 = fit_lasso_cv$lambda.1se
pred_lasso1 <- predict(fit_lasso, s = bestlam1, newx = as.matrix(BodyFat_test[,2:ncol(BodyFat_train)]))
# pred_lasso2 <- predict(fit_lasso, s = bestlam2, newx = as.matrix(BodyFat_test[,2:ncol(BodyFat_train)]))
MSE_lasso_test[i]<- mean((BodyFat_test$BODYFAT - pred_lasso1) ** 2)
MSE_lasso_train[i] <- mean((BodyFat_train$BODYFAT - predict(fit_lasso, s = bestlam1, newx = as.matrix(BodyFat_train[,2:ncol(BodyFat_train)])))^2)
# RMSE_lasso2 <- sqrt(mean((BodyFat_test$BODYFAT - pred_lasso2) ** 2))
# coeff_lasso1 <- predict(fit_lasso, s = bestlam1, type = 'coefficient')
# summary(fit_best)
pred_y = predict(fit_best, newdata = BodyFat_test[,(lm_best_index+1)])
MSE_lm_train[i] = rss[best_num_variables] / (n) # For easier to compare, set the denominator to be n.
MSE_lm_test[i] = cal_MSE(BodyFat_test$BODYFAT, pred_y)
fit_sm6 <- mgcv::gam(BODYFAT~ 1 + AGE + WEIGHT
+ s(ABDOMEN)
+ s(THIGH)
+ FOREARM + s(WRIST)
,data = BodyFat_train, method = 'REML')
# summary(fit_sm6)
pred_y = predict(fit_sm6,newdata = BodyFat_test)
MSE_NR6_train[i] = mean(residuals(fit_sm6)^2)
MSE_NR6_test[i] = cal_MSE(BodyFat_test$BODYFAT, pred_y)
fit_sm08 <- mgcv::gam(BODYFAT~ 1 + AGE  + WEIGHT
+ s(NECK)  + s(ABDOMEN)
+ s(THIGH) + s(BICEPS)
+ FOREARM + s(WRIST)
,data = BodyFat_train, method = 'REML')
# summary(fit_sm08)
pred_y = predict(fit_sm08,newdata = BodyFat_test)
MSE_NR8_train[i] = mean(residuals(fit_sm08)^2)
MSE_NR8_test[i] = cal_MSE(BodyFat_test$BODYFAT, pred_y)
fit_sm_nx_lm <-  mgcv::gam(BODYFAT~ 1
+ s(ABDOMEN)
,data = BodyFat, method = 'REML')
# summary(fit_sm_nx_lm)
pred_y = predict(fit_sm_nx_lm,newdata = BodyFat_test)
MSE_NRVS_train[i] = mean(residuals(fit_sm_nx_lm)^2)
MSE_NRVS_test[i] = cal_MSE(BodyFat_test$BODYFAT, pred_y)
fit_sm_nx_lm2 <- mgcv::gam(BODYFAT~ 1 + AGE +WEIGHT  + FOREARM
+ s(ABDOMEN,WRIST,THIGH)
,data = BodyFat, method = 'REML')
summary(fit_sm_nx_lm2)
pred_y = predict(fit_sm_nx_lm2,newdata = BodyFat_test)
MSE_NRVS2_train[i] = mean(residuals(fit_sm_nx_lm2)^2)
MSE_NRVS2_test[i] = cal_MSE(BodyFat_test$BODYFAT, pred_y)
}
(result = data.frame(lm_test = mean(MSE_lm_test),lm_train = mean(MSE_lm_train),
lm3_test = mean(MSE_lm3_test), lm3_train = mean(MSE_lm3_train),
lasso_test = mean(MSE_lasso_test), lasso_train = mean(MSE_lasso_train),
NR6_test = mean(MSE_NR6_test), NR6_train = mean(MSE_NR6_train),
NR8_test = mean(MSE_NR8_test), NR8_train = mean(MSE_NR8_train)
,NR_VS_test = mean(MSE_NRVS_test), MSE_NRVS_train = mean(MSE_NRVS_train)
,NR_VS2_test = mean(MSE_NRVS2_test), MSE_NRVS2_train = mean(MSE_NRVS2_train)
))
print(result)
(result_rmse = data.frame(lm_test = sqrt(mean(MSE_lm_test)),lm_train = sqrt(mean(MSE_lm_train)),
lm3_test = sqrt(mean(MSE_lm3_test)), lm3_train = sqrt(mean(MSE_lm3_train)),
lasso_test = sqrt(mean(MSE_lasso_test)), lasso_train = sqrt(mean(MSE_lasso_train)),
NR6_test = sqrt(mean(MSE_NR6_test)), NR6_train = sqrt(mean(MSE_NR6_train)),
NR8_test = sqrt(mean(MSE_NR8_test)), NR8_train = sqrt(mean(MSE_NR8_train))
,NR_VS_test = sqrt(mean(MSE_NRVS_test)), MSE_NRVS_train = sqrt(mean(MSE_NRVS_train))
,NR_VS2_test = sqrt(mean(MSE_NRVS2_test)), MSE_NRVS2_train = sqrt(mean(MSE_NRVS2_train))
))
print(result_rmse)
source("/Codes/Shiny/shiny.R")
setwd("D:/WISC/stat628/Module 2/Stat628Module2_Group9")
source("D:/WISC/stat628/Module 2/Stat628Module2_Group9/Codes/Shiny/shiny.R")
source("D:/WISC/stat628/Module 2/Stat628Module2_Group9/Code/Shiny/shiny.R")
runApp('Code/Shiny/shiny.R')
runApp('Code/Shiny/shiny.R')
runApp('Code/Shiny/shiny.R')
runApp('D:/WISC/stat628/Module 2/Stat628Module2_Group9/Code/Shiny/shiny.R')
runApp('D:/WISC/stat628/Module 2/Stat628Module2_Group9/Code/Shiny/shiny.R')
runApp('D:/WISC/stat628/Module 2/Stat628Module2_Group9/Code/Shiny/shiny.R')
runApp('D:/WISC/stat628/Module 2/Stat628Module2_Group9/Code/Shiny/shiny.R')
runApp('D:/WISC/stat628/Module 2/Stat628Module2_Group9/Code/Shiny/shiny.R')
runApp('D:/WISC/stat628/Module 2/Stat628Module2_Group9/Code/Shiny/shiny.R')
runApp('D:/WISC/stat628/Module 2/Stat628Module2_Group9/Code/Shiny/shiny.R')
