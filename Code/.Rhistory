AIC(fit_sm02)
AIC(fit_sm03)
AIC(fit_sm04)
AIC(fit_sm05)
fit_sm14 <- mgcv::gam(BODYFAT~ 1 + s(AGE) + s(WEIGHT) + s(HEIGHT) + s(ADIPOSITY)
+ s(NECK) + s(CHEST) + s(ABDOMEN) + s(HIP)
+ s(THIGH) + s(KNEE) + s(ANKLE) + s(BICEPS)
+ s(FOREARM) + s(WRIST)
,data = BodyFat, method = 'REML', select = TRUE)
summary(fit_sm14)
fit_sm011 <- mgcv::gam(BODYFAT~ 1 + s(AGE)  + s(WEIGHT) + s(HEIGHT)
+ s(NECK)  + s(ABDOMEN) + s(HIP)
+ s(THIGH) + s(BICEPS)
+ s(FOREARM) + s(WRIST)
,data = BodyFat, method = 'REML')
summary(fit_sm011)
fit_sm02 <- mgcv::gam(BODYFAT~ 1 + AGE  + WEIGHT + HEIGHT
+ s(NECK)  + s(ABDOMEN)
+ s(THIGH) + s(BICEPS)
+ FOREARM + s(WRIST)
,data = BodyFat, method = 'REML')
summary(fit_sm02)
fit_sm02 <- mgcv::gam(BODYFAT~ 1 + AGE  + WEIGHT
+ s(NECK)  + s(ABDOMEN)
+ s(THIGH) + s(BICEPS)
+ FOREARM + s(WRIST)
,data = BodyFat, method = 'REML')
summary(fit_sm02)
fit_sm02 <- mgcv::gam(BODYFAT~ 1 + AGE  + WEIGHT
+ s(NECK)  + s(ABDOMEN)
+ s(THIGH)
+ FOREARM + s(WRIST)
,data = BodyFat, method = 'REML')
summary(fit_sm02)
fit_sm02 <- mgcv::gam(BODYFAT~ 1 + AGE  + WEIGHT
+ s(ABDOMEN)
+ s(THIGH)
+ FOREARM + s(WRIST)
,data = BodyFat, method = 'REML')
summary(fit_sm02)
rm(list=ls())
# Read the data ----------------------------------------
setwd("D:/WISC/stat628/Module 2/Stat628Module2_Group9")
BodyFatData <- read.csv('../BodyFat.csv')
del_index = c(33, 39, 42, 48, 76, 96, 163, 172, 182, 216, 221)
BodyFat = BodyFatData[-del_index,]
BodyFat = subset(BodyFat, select = -c(IDNO,DENSITY))
# Create K-fold ----------------------------
## I see many cv function are written like this.
## The number in each fold may not be equal.
K = 10
k_fold_data <- function(K = 10, data){
n = nrow(data)
f <- ceiling(n/K)
s <- sample(rep(1L:K, f), n)
n.s <- table(s)
print(n.s)
test_data = list()
train_data = list()
for (i in c(1:K)){
test_data[[i]] = data[which(s==i),]
train_data[[i]] = data[which(s!=i),]
}
return(list(test_data,train_data))
}
res = k_fold_data(data = BodyFat)
MSE_lm_train = numeric(K) # Simple linear model
MSE_lm_test = numeric(K) # Simple linear model
MSE_NR6_train = numeric(K) # Nonparametirc model with 3 variables
MSE_NR6_test = numeric(K) # Nonparametirc model with 3 variables
MSE_NR3_train = numeric(K) # Nonparametirc model with 6 variables
MSE_NR3_test = numeric(K) # Nonparametirc model with 6 variables
MSE_NRVS_train = numeric(K)
MSE_NRVS_test = numeric(K)
MSE_NRVS2_train = numeric(K)
MSE_NRVS2_test = numeric(K)
library(mgcv)
library(leaps)
cal_MSE <- function(y_test, y_pred){
n = length(y_test)
return(sum((y_test-y_pred)^2)/n)
}
for (i in c(1:K)){
BodyFat_train = res[[2]][[i]]
BodyFat_test = res[[1]][[i]]
# Best Subset
Y = BodyFat_train$BODYFAT
n = nrow(BodyFat_train)
X = subset(BodyFat_train, select = -c(BODYFAT))
model = regsubsets(y = Y, x = X, nvmax = dim(X)[2])
ss = summary(model)
rsq = ss$rsq
rss = ss$rss
adjr2 = ss$adjr2
cp = ss$cp ## Equivalent to AIC
bic = ss$bic
## Choose the BIC criteria
best_num_variables = which.min(bic)
lm_best_index = which(ss$which[best_num_variables,][2:15])
fit_best = lm(Y~., data = cbind(Y,X[,lm_best_index]))
print(fit_best$rank)
# summary(fit_best)
pred_y = predict(fit_best, newdata = BodyFat_test[,(lm_best_index+1)])
MSE_lm_train[i] = rss[best_num_variables] / (n) # For easier to compare, set the denominator to be n.
MSE_lm_test[i] = cal_MSE(BodyFat_test$BODYFAT, pred_y)
fit_sm6 <- mgcv::gam(BODYFAT~ 1 + s(AGE) + WEIGHT + s(ABDOMEN) + s(THIGH) + FOREARM + s(WRIST),data = BodyFat_train,method = 'REML')
# summary(fit_sm6)
pred_y = predict(fit_sm6,newdata = BodyFat_test)
MSE_NR6_train[i] = sum(fit_sm6$residuals)/n
MSE_NR6_test[i] = cal_MSE(BodyFat_test$BODYFAT, pred_y)
fit_sm3 <- mgcv::gam(BODYFAT~ 1 + WEIGHT + s(ABDOMEN)+ s(WRIST),data = BodyFat_train,method = 'REML')
# summary(fit_sm3)
pred_y = predict(fit_sm3,newdata = BodyFat_test)
MSE_NR3_train[i] = sum(fit_sm3$residuals)/n
MSE_NR3_test[i] = cal_MSE(BodyFat_test$BODYFAT, pred_y)
fit_sm_nx_lm <- mgcv::gam(BODYFAT~ 1 + AGE + WEIGHT
+ s(ABDOMEN)
+ s(THIGH)
+ FOREARM + s(WRIST)
,data = BodyFat_train, method = 'REML')
# summary(fit_sm_nx_lm)
pred_y = predict(fit_sm_nx_lm,newdata = BodyFat_test)
MSE_NRVS_train[i] = sum(fit_sm_nx_lm$residuals)/n
MSE_NRVS_test[i] = cal_MSE(BodyFat_test$BODYFAT, pred_y)
fit_sm_nx_lm2 <- mgcv::gam(BODYFAT~ 1 + AGE + HEIGHT
+ NECK  + s(ABDOMEN)
+ s(WRIST),data = BodyFat_train, method = 'REML')
# summary(fit_sm_nx_lm2)
pred_y = predict(fit_sm_nx_lm2,newdata = BodyFat_test)
MSE_NRVS2_train[i] = sum(fit_sm_nx_lm2$residuals)/n
MSE_NRVS2_test[i] = cal_MSE(BodyFat_test$BODYFAT, pred_y)
}
(result = data.frame(lm_test = mean(MSE_lm_test),lm_train = mean(MSE_lm_train),
NR3_test = mean(MSE_NR3_test), NR3_train = mean(MSE_NR3_train),
NR6_test = mean(MSE_NR6_test), NR6_train = mean(MSE_NR6_train),
NR_VS_test = mean(MSE_NRVS_test), MSE_NRVS_train = mean(MSE_NRVS_train),
NR_VS2_test = mean(MSE_NRVS2_test), MSE_NRVS2_train = mean(MSE_NRVS2_train)))
print(result)
(result_rmse = data.frame(lm_test = sqrt(mean(MSE_lm_test)),lm_train = sqrt(mean(MSE_lm_train)),
NR3_test = sqrt(mean(MSE_NR3_test)), NR3_train = sqrt(mean(MSE_NR3_train)),
NR6_test = sqrt(mean(MSE_NR6_test)), NR6_train = sqrt(mean(MSE_NR6_train)),
NR_VS_test = sqrt(mean(MSE_NRVS_test)), MSE_NRVS_train = sqrt(mean(MSE_NRVS_train)),
NR_VS2_test = sqrt(mean(MSE_NRVS2_test)), MSE_NRVS2_train = sqrt(mean(MSE_NRVS2_train))))
print(result_rmse)
rm(list=ls())
# Read the data ----------------------------------------
setwd("D:/WISC/stat628/Module 2/Stat628Module2_Group9")
BodyFatData <- read.csv('../BodyFat.csv')
del_index = c(33, 39, 42, 48, 76, 96, 163, 172, 182, 216, 221)
BodyFat = BodyFatData[-del_index,]
BodyFat = subset(BodyFat, select = -c(IDNO,DENSITY))
# Create K-fold ----------------------------
## I see many cv function are written like this.
## The number in each fold may not be equal.
K = 10
k_fold_data <- function(K = 10, data){
n = nrow(data)
f <- ceiling(n/K)
s <- sample(rep(1L:K, f), n)
n.s <- table(s)
print(n.s)
test_data = list()
train_data = list()
for (i in c(1:K)){
test_data[[i]] = data[which(s==i),]
train_data[[i]] = data[which(s!=i),]
}
return(list(test_data,train_data))
}
res = k_fold_data(data = BodyFat)
MSE_lm_train = numeric(K) # Simple linear model
MSE_lm_test = numeric(K) # Simple linear model
MSE_NR6_train = numeric(K) # Nonparametirc model with 3 variables
MSE_NR6_test = numeric(K) # Nonparametirc model with 3 variables
MSE_NR3_train = numeric(K) # Nonparametirc model with 6 variables
MSE_NR3_test = numeric(K) # Nonparametirc model with 6 variables
MSE_NRVS_train = numeric(K)
MSE_NRVS_test = numeric(K)
MSE_NRVS2_train = numeric(K)
MSE_NRVS2_test = numeric(K)
library(mgcv)
library(leaps)
cal_MSE <- function(y_test, y_pred){
n = length(y_test)
return(sum((y_test-y_pred)^2)/n)
}
for (i in c(1:K)){
BodyFat_train = res[[2]][[i]]
BodyFat_test = res[[1]][[i]]
# Best Subset
Y = BodyFat_train$BODYFAT
n = nrow(BodyFat_train)
X = subset(BodyFat_train, select = -c(BODYFAT))
model = regsubsets(y = Y, x = X, nvmax = dim(X)[2])
ss = summary(model)
rsq = ss$rsq
rss = ss$rss
adjr2 = ss$adjr2
cp = ss$cp ## Equivalent to AIC
bic = ss$bic
## Choose the BIC criteria
best_num_variables = which.min(bic)
lm_best_index = which(ss$which[best_num_variables,][2:15])
fit_best = lm(Y~., data = cbind(Y,X[,lm_best_index]))
print(fit_best$rank)
# summary(fit_best)
pred_y = predict(fit_best, newdata = BodyFat_test[,(lm_best_index+1)])
MSE_lm_train[i] = rss[best_num_variables] / (n) # For easier to compare, set the denominator to be n.
MSE_lm_test[i] = cal_MSE(BodyFat_test$BODYFAT, pred_y)
fit_sm6 <- mgcv::gam(BODYFAT~ 1 + s(AGE) + WEIGHT + s(ABDOMEN) + s(THIGH) + FOREARM + s(WRIST),data = BodyFat_train,method = 'REML')
# summary(fit_sm6)
pred_y = predict(fit_sm6,newdata = BodyFat_test)
MSE_NR6_train[i] = sum(fit_sm6$residuals)/n
MSE_NR6_test[i] = cal_MSE(BodyFat_test$BODYFAT, pred_y)
fit_sm3 <- mgcv::gam(BODYFAT~ 1 + WEIGHT + s(ABDOMEN)+ s(WRIST),data = BodyFat_train,method = 'REML')
# summary(fit_sm3)
pred_y = predict(fit_sm3,newdata = BodyFat_test)
MSE_NR3_train[i] = sum(fit_sm3$residuals)/n
MSE_NR3_test[i] = cal_MSE(BodyFat_test$BODYFAT, pred_y)
fit_sm_nx_lm <- mgcv::gam(BODYFAT~ 1 + AGE + WEIGHT
+ s(ABDOMEN)
+ s(THIGH)
+ FOREARM + s(WRIST)
,data = BodyFat_train, method = 'REML')
# summary(fit_sm_nx_lm)
pred_y = predict(fit_sm_nx_lm,newdata = BodyFat_test)
MSE_NRVS_train[i] = sum(fit_sm_nx_lm$residuals)/n
MSE_NRVS_test[i] = cal_MSE(BodyFat_test$BODYFAT, pred_y)
fit_sm_nx_lm2 <- mgcv::gam(BODYFAT~ 1 + AGE + WEIGHT
+ s(ABDOMEN)
+ s(THIGH)
+ s(WRIST),data = BodyFat_train, method = 'REML')
# summary(fit_sm_nx_lm2)
pred_y = predict(fit_sm_nx_lm2,newdata = BodyFat_test)
MSE_NRVS2_train[i] = sum(fit_sm_nx_lm2$residuals)/n
MSE_NRVS2_test[i] = cal_MSE(BodyFat_test$BODYFAT, pred_y)
}
(result = data.frame(lm_test = mean(MSE_lm_test),lm_train = mean(MSE_lm_train),
NR3_test = mean(MSE_NR3_test), NR3_train = mean(MSE_NR3_train),
NR6_test = mean(MSE_NR6_test), NR6_train = mean(MSE_NR6_train),
NR_VS_test = mean(MSE_NRVS_test), MSE_NRVS_train = mean(MSE_NRVS_train),
NR_VS2_test = mean(MSE_NRVS2_test), MSE_NRVS2_train = mean(MSE_NRVS2_train)))
print(result)
(result_rmse = data.frame(lm_test = sqrt(mean(MSE_lm_test)),lm_train = sqrt(mean(MSE_lm_train)),
NR3_test = sqrt(mean(MSE_NR3_test)), NR3_train = sqrt(mean(MSE_NR3_train)),
NR6_test = sqrt(mean(MSE_NR6_test)), NR6_train = sqrt(mean(MSE_NR6_train)),
NR_VS_test = sqrt(mean(MSE_NRVS_test)), MSE_NRVS_train = sqrt(mean(MSE_NRVS_train)),
NR_VS2_test = sqrt(mean(MSE_NRVS2_test)), MSE_NRVS2_train = sqrt(mean(MSE_NRVS2_train))))
print(result_rmse)
summary(fit_sm_nx_lm)
summary(fit_sm011)
fit_sm14 <- mgcv::gam(BODYFAT~ 1 + s(AGE) + s(WEIGHT) + s(HEIGHT) + s(ADIPOSITY)
+ s(NECK) + s(CHEST) + s(ABDOMEN) + s(HIP)
+ s(THIGH) + s(KNEE) + s(ANKLE) + s(BICEPS)
+ s(FOREARM) + s(WRIST)
,data = BodyFat, method = 'REML', select = TRUE)
summary(fit_sm14)
AIC(fit_sm14)
fit_sm011 <- mgcv::gam(BODYFAT~ 1 + s(AGE)  + s(WEIGHT) + s(HEIGHT)
+ s(NECK)  + s(ABDOMEN) + s(HIP)
+ s(THIGH) + s(BICEPS)
+ s(FOREARM) + s(WRIST)
,data = BodyFat, method = 'REML')
summary(fit_sm011)
AIC(fit_sm011)
fit_sm05 <- mgcv::gam(BODYFAT~ 1 + AGE  + WEIGHT
+ s(ABDOMEN)
+ s(THIGH)
+ FOREARM + s(WRIST)
,data = BodyFat, method = 'REML')
summary(fit_sm05)
predict(fit_sm05, newdata = data.frame(AGE = 22, WEIGHT = 0,
ABDOMEN= 85.2, THIGH = 59,
FOREARM = 27.4, WRIST = 17.1))
y =  predict(fit_sm05, newdata = data.frame(AGE = 22, WEIGHT = 0,
ABDOMEN= 85.2, THIGH = 59,
FOREARM = 27.4, WRIST = 17.1),
interval = 'prediction')
y
y =  predict(fit_sm05, newdata = data.frame(AGE = 22, WEIGHT = 0,
ABDOMEN= 85.2, THIGH = 59,
FOREARM = 27.4, WRIST = 17.1),
interval = 'confidence')
y
?predict
y =  predict(fit_sm05, newdata = data.frame(AGE = 22, WEIGHT = 0,
ABDOMEN= 85.2, THIGH = 59,
FOREARM = 27.4, WRIST = 17.1),interval = 'prediction')
y
plot(fit_sm05, pages = 1, scheme = 1, all.terms = TRUE, seWithMean = TRUE)
plot(fit_sm05,select = 1, shade = TRUE, scale = 0, seWithMean = TRUE)
plot(fit_sm05,select = 2, shade = TRUE, scale = 0, seWithMean = TRUE)
plot(fit_sm05,select = 3, shade = TRUE, scale = 0, seWithMean = TRUE)
fit_lm = lm(BODYFAT~ABDOMEN + THIGH + WRIST + AGE + WEIGHT + FOREARM, data = BodyFat)
summary(fit_lm)
library(boot)
?boot()
city
pred_cal <- function(d, w){
fit_sm05<- mgcv::gam(BODYFAT~ 1 + AGE  + WEIGHT
+ s(ABDOMEN)
+ s(THIGH)
+ FOREARM + s(WRIST)
,data = d, method = 'REML')
y = predict(fit_sm05, newdata = w)
y
}
new_x = data.frame(AGE = 22, WEIGHT = 0,
ABDOMEN= 85.2, THIGH = 59,
FOREARM = 27.4, WRIST = 17.1)
res = boot(BodyFat, pred_cal, R = 100, stype = 'w')
pred_cal <- function(d, w){
print(dim(d))
print(w)
fit_sm05<- mgcv::gam(BODYFAT~ 1 + AGE  + WEIGHT
+ s(ABDOMEN)
+ s(THIGH)
+ FOREARM + s(WRIST)
,data = d, method = 'REML')
y = predict(fit_sm05, newdata = w)
y
}
pred_cal <- function(d, w){
print(dim(d))
print(w)
fit_sm05<- mgcv::gam(BODYFAT~ 1 + AGE  + WEIGHT
+ s(ABDOMEN)
+ s(THIGH)
+ FOREARM + s(WRIST)
,data = d, method = 'REML')
y = predict(fit_sm05, newdata = w)
y
}
new_x = data.frame(AGE = 22, WEIGHT = 0,
ABDOMEN= 85.2, THIGH = 59,
FOREARM = 27.4, WRIST = 17.1)
res = boot(BodyFat, pred_cal, R = 100, stype = 'w')
pred_cal(BodyFat, pred_cal)
d = BodyFat
fit_sm05<- mgcv::gam(BODYFAT~ 1 + AGE  + WEIGHT
+ s(ABDOMEN)
+ s(THIGH)
+ FOREARM + s(WRIST)
,data = d, method = 'REML')
w = new_x
y = predict(fit_sm05, newdata = w)
y
pred_cal <- function(d, w){
print(dim(d))
print(w)
fit_sm05<- mgcv::gam(BODYFAT~ 1 + AGE  + WEIGHT
+ s(ABDOMEN)
+ s(THIGH)
+ FOREARM + s(WRIST)
,data = d, method = 'REML')
y = predict(fit_sm05, newdata = w)
y
}
pred_cal(d,w)
res = boot(BodyFat, pred_cal, R = 100, stype = 'w', t0 = new_x)
city
res = boot(BodyFat, pred_cal, R = 100, stype = 'w', strata = new_x)
next
pred_cal <- function(d, fit.pred){
# print(dim(d))
# print(w)
fit_sm05<- mgcv::gam(BODYFAT~ 1 + AGE  + WEIGHT
+ s(ABDOMEN)
+ s(THIGH)
+ FOREARM + s(WRIST)
,data = d, method = 'REML')
y = predict(fit_sm05, newdata = fit.pred)
y
}
new_x = data.frame(AGE = 22, WEIGHT = 0,
ABDOMEN= 85.2, THIGH = 59,
FOREARM = 27.4, WRIST = 17.1)
res = boot(BodyFat, pred_cal, R = 100, fit.pred = new_x)
pred_cal <- function(d, x.pred){
# print(dim(d))
# print(w)
fit_sm05<- mgcv::gam(BODYFAT~ 1 + AGE  + WEIGHT
+ s(ABDOMEN)
+ s(THIGH)
+ FOREARM + s(WRIST)
,data = d, method = 'REML')
y = predict(fit_sm05, newdata = x.pred)
y
}
new_x = data.frame(AGE = 22, WEIGHT = 0,
ABDOMEN= 85.2, THIGH = 59,
FOREARM = 27.4, WRIST = 17.1)
res = boot(BodyFat, pred_cal, R = 100, x.pred = new_x)
pred_cal <- function(dat, x.pred){
# print(dim(d))
# print(w)
fit_sm05<- mgcv::gam(BODYFAT~ 1 + AGE  + WEIGHT
+ s(ABDOMEN)
+ s(THIGH)
+ FOREARM + s(WRIST)
,data = dat, method = 'REML')
y = predict(fit_sm05, newdata = x.pred)
y
}
new_x = data.frame(AGE = 22, WEIGHT = 0,
ABDOMEN= 85.2, THIGH = 59,
FOREARM = 27.4, WRIST = 17.1)
res = boot(BodyFat, pred_cal, R = 100, x.pred = new_x)
pred_cal <- function(data, x.pred){
# print(dim(d))
# print(w)
fit_sm05<- mgcv::gam(BODYFAT~ 1 + AGE  + WEIGHT
+ s(ABDOMEN)
+ s(THIGH)
+ FOREARM + s(WRIST)
,data = data, method = 'REML')
y = predict(fit_sm05, newdata = x.pred)
y
}
new_x = data.frame(AGE = 22, WEIGHT = 0,
ABDOMEN= 85.2, THIGH = 59,
FOREARM = 27.4, WRIST = 17.1)
res = boot(data = BodyFat, pred_cal, R = 100, x.pred = new_x)
AIC(fit_sm14)
AIC(fit_sm011)
AIC(fit_sm02)
fit_sm02 <- mgcv::gam(BODYFAT~ 1 + AGE  + WEIGHT
+ s(ABDOMEN)
+ s(THIGH)
+ FOREARM + s(WRIST)
,data = BodyFat, method = 'REML')
summary(fit_sm02)
AIC(fit_sm02)
AIC(fit_sm03)
fit_sm03 <- mgcv::gam(BODYFAT~ 1 + AGE  + WEIGHT
+ s(NECK)  + s(ABDOMEN)
+ s(THIGH) + s(BICEPS)
+ FOREARM + s(WRIST)
,data = BodyFat, method = 'REML')
summary(fit_sm03)
AIC(fit_sm03)
fit_sm04 <- mgcv::gam(BODYFAT~ 1 + AGE  + WEIGHT
+ s(NECK)  + s(ABDOMEN)
+ s(THIGH)
+ FOREARM + s(WRIST)
,data = BodyFat, method = 'REML')
summary(fit_sm04)
AIC(fit_sm04)
fit_sm05 <- mgcv::gam(BODYFAT~ 1 + AGE  + WEIGHT
+ s(ABDOMEN)
+ s(THIGH)
+ FOREARM + s(WRIST)
,data = BodyFat, method = 'REML')
summary(fit_sm05)
AIC(fit_sm05)
AIC(fit_lm)
AIC(fit_best)
?s()
?boot
pred_cal <- function(data, x.pred){
# print(dim(d))
# print(w)
fit_sm05<- mgcv::gam(BODYFAT~ 1 + AGE  + WEIGHT
+ s(ABDOMEN)
+ s(THIGH)
+ FOREARM + s(WRIST)
,data = data, method = 'REML')
y = predict(fit_sm05, newdata = x.pred)
y
}
res = boot(data = BodyFat, pred_cal, R = 100, x.pred = new_x)
summary(fit_sm05)
?s
gam.check(fit_sm05)
fit_sm14 <- mgcv::gam(BODYFAT~ 1 + s(AGE) + s(WEIGHT) + s(HEIGHT) + s(ADIPOSITY)
+ s(NECK) + s(CHEST) + s(ABDOMEN) + s(HIP)
+ s(THIGH) + s(KNEE) + s(ANKLE) + s(BICEPS)
+ s(FOREARM) + s(WRIST)
,data = BodyFat, method = 'REML', select = TRUE)
summary(fit_sm14)
AIC(fit_sm14)
fit_sm011 <- mgcv::gam(BODYFAT~ 1 + s(AGE)  + s(WEIGHT) + s(HEIGHT)
+ s(NECK)  + s(ABDOMEN) + s(HIP)
+ s(THIGH) + s(BICEPS)
+ s(FOREARM) + s(WRIST)
,data = BodyFat, method = 'REML')
summary(fit_sm011)
gam.check(fit_sm011)
fit_sm011 <- mgcv::gam(BODYFAT~ 1 + s(AGE, k = 12)  + s(WEIGHT) + s(HEIGHT)
+ s(NECK)  + s(ABDOMEN) + s(HIP)
+ s(THIGH) + s(BICEPS)
+ s(FOREARM) + s(WRIST)
,data = BodyFat, method = 'REML')
summary(fit_sm011)
gam.check(fit_sm011)
gam.check(fit_sm05)
gam.check(fit_sm05,rep = 500)
?gam.check
pp = preplot(gam.check(fit_sm05,rep = 500))
?gam.check
gg.gam(fit_sm05, rep = 500)
mgcv::gg.gam(fit_sm05, rep = 500)
mgcv::qq.gam(fit_sm05, rep = 500)
mgcv::qq.gam(fit_sm05, rep = 500, level = .95)
mgcv::qq.gam(fit_sm05, rep = 500, level = .95, main = '95\% confidence interval')
mgcv::qq.gam(fit_sm05, rep = 500, level = .95, main = '95% confidence interval')
appraise(fit_sm05, method = 'simulate')
library(appraise)
library(gratia)
install.packages("gratia")
library(gratia)
appraise(fit_sm05,method = 'simulate')
